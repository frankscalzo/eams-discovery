import AWS from 'aws-sdk';

const confluenceAPI = {
  // Confluence configuration
  config: {
    baseUrl: process.env.REACT_APP_CONFLUENCE_URL || '',
    username: process.env.REACT_APP_CONFLUENCE_USERNAME || '',
    apiToken: process.env.REACT_APP_CONFLUENCE_API_TOKEN || '',
    spaceKey: process.env.REACT_APP_CONFLUENCE_SPACE_KEY || 'EAMS'
  },

  // Get Confluence configuration from Parameter Store
  async getConfig() {
    try {
      const ssm = new AWS.SSM({ region: process.env.REACT_APP_AWS_REGION || 'us-east-1' });
      const params = {
        Names: [
          '/eams/confluence/url',
          '/eams/confluence/username',
          '/eams/confluence/api-token',
          '/eams/confluence/space-key'
        ],
        WithDecryption: true
      };
      
      const result = await ssm.getParameters(params).promise();
      const config = {};
      
      result.Parameters.forEach(param => {
        const key = param.Name.split('/').pop();
        config[key] = param.Value;
      });
      
      return { ...this.config, ...config };
    } catch (error) {
      console.warn('Could not load Confluence config from Parameter Store:', error);
      return this.config;
    }
  },

  // Create a Confluence page for an application
  async createApplicationPage(application, projectId) {
    try {
      const config = await this.getConfig();
      
      if (!config.baseUrl || !config.username || !config.apiToken) {
        throw new Error('Confluence configuration not available');
      }

      const pageTitle = `${application.ApplicationName} - Application Documentation`;
      const pageContent = this.generateApplicationPageContent(application, projectId);
      
      const response = await fetch(`${config.baseUrl}/rest/api/content`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Basic ${btoa(`${config.username}:${config.apiToken}`)}`
        },
        body: JSON.stringify({
          type: 'page',
          title: pageTitle,
          space: { key: config.spaceKey },
          body: {
            storage: {
              value: pageContent,
              representation: 'storage'
            }
          }
        })
      });

      if (!response.ok) {
        throw new Error(`Confluence API error: ${response.status} ${response.statusText}`);
      }

      const result = await response.json();
      return {
        id: result.id,
        url: `${config.baseUrl}/pages/viewpage.action?pageId=${result.id}`,
        title: pageTitle
      };
    } catch (error) {
      console.error('Error creating Confluence page:', error);
      throw error;
    }
  },

  // Generate Confluence page content for an application
  generateApplicationPageContent(application, projectId) {
    return `
<h1>${application.ApplicationName}</h1>

<h2>Application Overview</h2>
<table>
  <tr><td><strong>Application Name:</strong></td><td>${application.ApplicationName}</td></tr>
  <tr><td><strong>Description:</strong></td><td>${application.ApplicationDescription || 'N/A'}</td></tr>
  <tr><td><strong>Owner:</strong></td><td>${application.Owner?.fullName || 'N/A'}</td></tr>
  <tr><td><strong>Manager:</strong></td><td>${application.Manager?.fullName || 'N/A'}</td></tr>
  <tr><td><strong>Teams:</strong></td><td>${application.Teams?.join(', ') || 'N/A'}</td></tr>
  <tr><td><strong>Epic/Ticket:</strong></td><td>${application.EpicSLGCHGTicket || 'N/A'}</td></tr>
</table>

<h2>Testing Information</h2>
<table>
  <tr><td><strong>Test Plan Ready:</strong></td><td>${application.TestPlanReady ? 'Yes' : 'No'}</td></tr>
  <tr><td><strong>Testing Status:</strong></td><td>${application.TestingStatus || 'N/A'}</td></tr>
  <tr><td><strong>Confidence %:</strong></td><td>${application.Confidence || 'N/A'}%</td></tr>
  <tr><td><strong>Testing Notes:</strong></td><td>${application.TestingNotes || 'N/A'}</td></tr>
</table>

<h2>Integration Details</h2>
<table>
  <tr><td><strong>Integration Type:</strong></td><td>${application.IntegrationType || 'N/A'}</td></tr>
  <tr><td><strong>Integration Details:</strong></td><td>${application.IntegrationDetails || 'N/A'}</td></tr>
</table>

<h2>Business Continuity</h2>
<table>
  <tr><td><strong>ROI:</strong></td><td>${application.ROI || 'N/A'}</td></tr>
  <tr><td><strong>RTO:</strong></td><td>${application.RTO || 'N/A'}</td></tr>
  <tr><td><strong>RPO:</strong></td><td>${application.RPO || 'N/A'}</td></tr>
</table>

<h2>Discovery Questions</h2>
<p>${application.DiscoveryQuestions || 'No discovery questions recorded.'}</p>

<h2>Attachments</h2>
<p>Files and documents related to this application will be listed here.</p>

<h2>Dependencies</h2>
<p>Application dependencies and relationships will be documented here.</p>

<hr>
<p><em>This page was automatically generated by the EAMS (Enterprise Application Management System) on ${new Date().toLocaleDateString()}.</em></p>
    `.trim();
  },

  // Update an existing Confluence page
  async updateApplicationPage(pageId, application, projectId) {
    try {
      const config = await this.getConfig();
      
      if (!config.baseUrl || !config.username || !config.apiToken) {
        throw new Error('Confluence configuration not available');
      }

      const pageContent = this.generateApplicationPageContent(application, projectId);
      
      const response = await fetch(`${config.baseUrl}/rest/api/content/${pageId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Basic ${btoa(`${config.username}:${config.apiToken}`)}`
        },
        body: JSON.stringify({
          version: { number: 1 },
          type: 'page',
          title: `${application.ApplicationName} - Application Documentation`,
          body: {
            storage: {
              value: pageContent,
              representation: 'storage'
            }
          }
        })
      });

      if (!response.ok) {
        throw new Error(`Confluence API error: ${response.status} ${response.statusText}`);
      }

      const result = await response.json();
      return {
        id: result.id,
        url: `${config.baseUrl}/pages/viewpage.action?pageId=${result.id}`,
        title: result.title
      };
    } catch (error) {
      console.error('Error updating Confluence page:', error);
      throw error;
    }
  },

  // Search for existing Confluence pages
  async searchPages(query) {
    try {
      const config = await this.getConfig();
      
      if (!config.baseUrl || !config.username || !config.apiToken) {
        throw new Error('Confluence configuration not available');
      }

      const response = await fetch(
        `${config.baseUrl}/rest/api/content/search?cql=space=${config.spaceKey} AND text~"${encodeURIComponent(query)}"`,
        {
          headers: {
            'Authorization': `Basic ${btoa(`${config.username}:${config.apiToken}`)}`
          }
        }
      );

      if (!response.ok) {
        throw new Error(`Confluence API error: ${response.status} ${response.statusText}`);
      }

      const result = await response.json();
      return result.results.map(page => ({
        id: page.id,
        title: page.title,
        url: `${config.baseUrl}/pages/viewpage.action?pageId=${page.id}`,
        lastModified: page.version.when
      }));
    } catch (error) {
      console.error('Error searching Confluence pages:', error);
      throw error;
    }
  }
};

export default confluenceAPI;
